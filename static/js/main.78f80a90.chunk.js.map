{"version":3,"sources":["components/PropertyCard.js","components/PropertyListings.js","serviceWorker.js","index.js"],"names":["PropertyCard","props","data","agency","mainImage","price","id","raisedButtonStyle","type","backgroundColor","green400","red400","cardHeaderStyle","brandingColors","primary","className","zDepth","Card","style","src","logo","alt","width","height","fontSize","onClick","buttonAction","label","labelStyle","margin","App","state","propertyResults","savedResults","showSnackbar","snackbarMessage","addToSavedProperties","bind","removeFromSavedProperties","handleRequestClose","this","setState","PropertyData","newProperty","filter","property","newSavedResults","findIndex","push","propertyIndex","splice","map","key","open","message","autoHideDuration","onRequestClose","contentStyle","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.78f80a90.chunk.js","sourcesContent":["import React from 'react'\nimport './PropertyCard.css'\nimport RaisedButton from 'material-ui/RaisedButton';\nimport { Card, CardActions, CardHeader, CardMedia, CardTitle, CardText } from 'material-ui/Card';\nimport Paper from 'material-ui/Paper';\nimport { green400, red400} from 'material-ui/styles/colors'\n\nexport default function PropertyCard(props) {\n  const { agency, mainImage, price, id } = props.data\n  const raisedButtonStyle = {}\n  if (props.type === 'Add') { raisedButtonStyle.backgroundColor = green400 }\n  if (props.type === 'Remove') { raisedButtonStyle.backgroundColor = red400 }\n  const cardTextStyle = {\n    fontSize: 20\n  }\n  const raisedButtonLabelStyle = {\n    fontSize: 24,\n    margin: 20\n  }\n  const cardHeaderStyle = {\n    backgroundColor: agency.brandingColors.primary\n  }\n  return (\n    <Paper className='propertyCard' zDepth={3}>\n      <Card>\n        <CardHeader \n          className='propertyCard__header' \n          style={cardHeaderStyle}>\n            <img src={`images/${agency.logo}`} alt=\"\"/>\n        </CardHeader>\n        <CardMedia className='propertyCard__image'>\n          <img src={`images/${mainImage}`} alt=\"\" style={{ width: '640px', height: 'auto' }}/>\n        </CardMedia>\n        <CardText \n          className='propertyCard__footer' \n          style={cardTextStyle}>\n          {price}\n        </CardText>\n        <div className='propertyCard__overlay'>\n          <div className='propertyCard__button_container'>\n            <RaisedButton \n              className='propertyCard__button' \n              onClick={() => props.buttonAction(id)}\n              style={raisedButtonStyle}\n              label={`${props.type} Property`}\n              labelStyle={raisedButtonLabelStyle}\n            />\n          </div>\n        </div>\n      </Card>\n    </Paper>\n  )\n}","import React, { Component } from 'react'\nimport PropertyCard from './PropertyCard'\nimport Snackbar from 'material-ui/Snackbar'\nimport PropertyData from '../db/data.json'\nimport './PropertyListings.css'\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      propertyResults: [],\n      savedResults: [],\n      showSnackbar: false,\n      snackbarMessage: '' \n    }\n    this.addToSavedProperties = this.addToSavedProperties.bind(this)\n    this.removeFromSavedProperties = this.removeFromSavedProperties.bind(this)\n    this.handleRequestClose = this.handleRequestClose.bind(this)\n  }\n\n  // fetch data from json file when component mounts\n  componentDidMount() {\n    this.setState({\n      propertyResults: PropertyData[\"results\"],\n      savedResults: PropertyData[\"saved\"]\n    })\n  }\n\n  // add a property from the results array to the saved properties array\n  addToSavedProperties(id) {\n    let newProperty = this.state.propertyResults.filter(property => property.id === id)[0]\n    let newSavedResults = this.state.savedResults\n    let propertyIndex = newSavedResults.findIndex(property => property.id === id)\n\n    // only add to saved properties list if not already there\n    if (propertyIndex !== -1) { \n      this.setState({ \n        showSnackbar: true, \n        snackbarMessage: 'Property Already Saved' })\n    } else {\n      newSavedResults.push(newProperty)\n      this.setState({ \n        savedResults: newSavedResults,\n        showSnackbar: true,\n        snackbarMessage: 'Property Added'\n      })\n    }\n  }\n\n  // remove a property from the saved properties array\n  removeFromSavedProperties(id) {\n    let propertyIndex = this.state.savedResults.findIndex(property => property.id === id)\n    if (propertyIndex !== -1) {\n      let newSavedResults = this.state.savedResults\n      newSavedResults.splice(propertyIndex, 1)\n      this.setState({ \n        savedResults: newSavedResults, \n        showSnackbar: true,\n        snackbarMessage: 'Property Removed' \n      })\n    }\n  }\n\n  // handle closing of snackbar when clicking away on screen\n  handleRequestClose() {\n    this.setState({ showSnackbar: false })\n  }\n\n  render() {\n    const { propertyResults, savedResults, showSnackbar, snackbarMessage } = this.state\n    const snackbarContentStyle = {\n      textAlign: 'center',\n      fontSize: 18\n    }\n    return (\n      <div className='property_listings'>\n        <div className='results_container'>\n          <h1 className='results_header'>Results</h1>\n          <div className='results'>\n            {propertyResults.map((property, id) => (\n              <PropertyCard \n                key={id} \n                data={property}\n                buttonAction={this.addToSavedProperties}\n                type={'Add'}\n              />\n            ))}\n          </div>\n        </div>\n        <div className='saved-properties_container'>\n          <h1 className='saved-properties_header'>Saved Properties</h1>\n          <div className='saved-properties'>\n            {savedResults.map((property, id) => (\n              <PropertyCard \n                key={id} \n                data={property} \n                buttonAction={this.removeFromSavedProperties}\n                type={'Remove'}\n              />\n            ))}\n          </div>\n        </div>\n        <Snackbar \n          open={showSnackbar}\n          message={snackbarMessage}\n          autoHideDuration={2000}\n          onRequestClose={this.handleRequestClose}\n          contentStyle={snackbarContentStyle}\n        />\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PropertyListings from './components/PropertyListings';\nimport * as serviceWorker from './serviceWorker';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiThemeProvider>\n      <PropertyListings />\n    </MuiThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}